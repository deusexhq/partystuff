//=============================================================================
// WeaponNailGun.
//=============================================================================
class WeaponNailGunWeaker extends DeusExWeapon;

var bool bTorchOn;

replication
{
reliable if(Role<ROLE_Authority)
	bTorchOn,TorchToggle;
reliable if(Role==ROLE_Authority)
	OnTorch,OffTorch;
}

simulated function LaserToggle()
{
TorchToggle();
}

simulated function LaserOff()
{
if(bTorchOn)
	TorchToggle();
}

simulated function TorchToggle()
{
if (bTorchOn)
	{
	bTorchOn=False;
	OffTorch();
	}
else
	{
	bTorchOn=True;
	OnTorch();
	}
}

simulated function OnTorch()
{
owner.LightEffect=LE_Spotlight;
owner.LightBrightness=120;
owner.LightSaturation=255;
owner.LightRadius=64;
owner.LightPeriod=32;
owner.LightCone=64;
owner.LightType=LT_Steady;
}

simulated function OffTorch()
{
owner.LightType=LT_None;
}

simulated function PreBeginPlay()
{
	Super.PreBeginPlay();

	// If this is a netgame, then override defaults
	if ( Level.NetMode != NM_StandAlone )
	{
		HitDamage = mpHitDamage;
		BaseAccuracy = mpBaseAccuracy;
		ReloadTime = mpReloadTime;
		AccurateRange = mpAccurateRange;
		MaxRange = mpMaxRange;
		ReloadCount = mpReloadCount;
	}
}

function SpawnSmoke()
{
  local SmokeTrail trail;
  local Vector X,Y,Z;

   if (Owner != None)
 
    trail = Spawn(Class'SmokeTrail',,, self.Location + CalcDrawOffset() + (FireOffset.X)* X + (FireOffset.Y) * Y  + (FireOffset.Z) * Z + vect(1,-0.8,1) * 3 );
              if (trail != None)
           
             trail.SetBase(self);
             trail.DrawScale = 1.00000;
             trail.OrigScale = trail.DrawScale;
         //    trail.RemoteRole = ROLE_None;
            
}

simulated function bool TestMPBeltSpot(int BeltSpot)
{
   return ( (BeltSpot >= 1) && (BeltSpot <=9) );
}

function Fire(float Value)
{
	Super.Fire(Value);
   	  SpawnSmoke();
}

state NormalFire //(Thanks to JimBowen for this Infinite ammo code) 
{ 
   Begin: 
      if ((ClipCount >= ReloadCount) && (ReloadCount != 0)) 
      { 
         if (!bAutomatic) 
         { 
            bFiring = False; 
            FinishAnim(); 
         } 
    
         if (Owner != None) 
         { 
            if (Owner.IsA('DeusExPlayer')) 
            { 
               bFiring = False; 
            } 
            else if (Owner.IsA('ScriptedPawn')) 
            { 
               bFiring = False; 
               ReloadAmmo(); 
            } 
         } 
         else 
         { 
            if (bHasMuzzleFlash) 
               EraseMuzzleFlashTexture(); 
            GotoState('Idle'); 
         } 
      } 
      if ( bAutomatic && (( Level.NetMode == NM_DedicatedServer ) || ((Level.NetMode == NM_ListenServer) && Owner.IsA('DeusExPlayer') && !DeusExPlayer(Owner).PlayerIsListenClient()))) 
         GotoState('Idle'); 
    
      Sleep(GetShotTime()); 
      if (bAutomatic) 
      { 
         GenerateBullet();       // In multiplayer bullets are generated by the client which will let the server know when 
         Goto('Begin'); 
      } 
      bFiring = False; 
      FinishAnim(); 
    
   /*      // if ReloadCount is 0 and we're not hand to hand, then this is a 
      // single-use weapon so destroy it after firing once 
      if ((ReloadCount == 0) && !bHandToHand) 
      { 
         if (DeusExPlayer(Owner) != None) 
            DeusExPlayer(Owner).RemoveItemFromSlot(Self);   // remove it from the inventory grid 
         Destroy(); 
      } 
      */              // Do I REALLY need all that crap JUST for infinite ammo? 
      ReadyToFire(); 
   Done: 
      bFiring = False; 
      Finish(); 
}

defaultproperties
{
     GoverningSkill=Class'DeusEx.SkillWeaponPistol'
     NoiseLevel=0.010000
     ShotTime=0.150000
     reloadTime=0.000000
     HitDamage=8
     maxRange=4800
     AccurateRange=2400
     BaseAccuracy=0.800000
     bCanHaveScope=True
     bHasScope=True
     ScopeFOV=25
     bCanHaveLaser=True
     bHasLaser=True
     recoilStrength=0.100000
     mpReloadTime=1.500000
     mpHitDamage=30
     mpBaseAccuracy=0.200000
     mpAccurateRange=1200
     mpMaxRange=8200
     bCanHaveModBaseAccuracy=True
     bCanHaveModReloadCount=True
     bCanHaveModAccurateRange=True
     bCanHaveModReloadTime=True
     FireOffset=(X=-24.000000,Y=10.000000,Z=14.000000)
     ProjectileClass=Class'PartyStuff.Nail2'
     shakemag=50.000000
     FireSound=Sound'DeusExSounds.Weapons.MiniCrossbowFire'
     AltFireSound=Sound'DeusExSounds.Weapons.StealthPistolReloadEnd'
     CockingSound=Sound'DeusExSounds.Weapons.StealthPistolReload'
     SelectSound=Sound'DeusExSounds.Weapons.StealthPistolSelect'
     InventoryGroup=113
     ItemName="|P2Nail Gun"
     PlayerViewOffset=(X=24.000000,Y=-10.000000,Z=-14.000000)
     PlayerViewMesh=LodMesh'DeusExItems.StealthPistol'
     PickupViewMesh=LodMesh'DeusExItems.StealthPistolPickup'
     ThirdPersonMesh=LodMesh'DeusExItems.StealthPistol3rd'
     Icon=Texture'DeusExUI.Icons.BeltIconStealthPistol'
     largeIcon=Texture'DeusExUI.Icons.LargeIconStealthPistol'
     largeIconWidth=47
     largeIconHeight=37
     Description="A modified nail pistol with extra nail capacity and more accuracy than a regular nailgun."
     beltDescription="|p2NGUN"
     Mesh=LodMesh'DeusExItems.StealthPistolPickup'
     CollisionRadius=8.000000
     CollisionHeight=0.800000
}
